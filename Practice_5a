#Practice for Module 5 assignment.

#The problems use the intercollegiate athletics database as described in the Order Entry
#Database Background document. The course website also contains Oracle and MySQL CREATE
#TABLE statements as well as INSERT statements.

#1. List the event number, date held, customer number, customer name, facility number, and facility name of 2013 events placed by Boulder customers.
SELECT EventNo, DateHeld, Customer.CustNo, CustName, Facility.FacNo, FacName
FROM intercollegiate.EventRequest, intercollegiate.Facility, intercollegiate.Customer
WHERE city = "Boulder" AND dateheld BETWEEN '2013-1-1' AND '2013-12-31'
AND EventRequest.CustNo = Customer.CustNo 
AND EventRequest.FacNo = Facility.FacNo;

#2. List the customer number, customer name, event number, date held, facility number, facility name, and estimated audience cost per person (EstCost / EstAudience) 
#for events held on 2013, in which the estimated cost per person is less than $0.2
SELECT Customer.CustNo, CustName, EventNo, DateHeld, Facility.FacNo, FacName, (EstCost/EstAudience) AS EstCostPerPerson
FROM intercollegiate.EventRequest, intercollegiate.Facility, intercollegiate.Customer
WHERE  (EstCost/EstAudience) <  0.2 AND dateheld BETWEEN '2013-1-1' AND '2013-12-31'
AND EventRequest.CustNo = Customer.CustNo 
AND EventRequest.FacNo = Facility.FacNo;

SELECT Customer.CustNo, CustName, EventNo, DateHeld, Facility.FacNo, FacName, (EstCost/EstAudience) AS EstCostPerPerson
FROM intercollegiate.EventRequest 
INNER JOIN intercollegiate.Facility  ON  EventRequest.FacNo = Facility.FacNo
INNER JOIN intercollegiate.Customer ON EventRequest.CustNo = Customer.CustNo 
WHERE  (EstCost/EstAudience) <  0.2 AND dateheld BETWEEN '2013-1-1' AND '2013-12-31';

#3. List the customer number, customer name, and total estimated costs for Approved events. The total amount of events is the sum of the estimated cost for each event. 
#Group the results by customer number and customer name.
SELECT Customer.CustNo, CustName, SUM(EstCost) AS EstimatedCost, `Status`
FROM intercollegiate.EventRequest, intercollegiate.Customer
WHERE `Status` = "Approved" AND Customer.CustNo = EventRequest.CustNo
GROUP BY CustNo, CustName;

SELECT Customer.CustNo, CustName, SUM(EstCost) AS EstimatedCost, `Status`
FROM intercollegiate.EventRequest INNER JOIN intercollegiate.Customer 
ON EventRequest.CustNo = Customer.CustNo
WHERE `Status` = "Approved"
GROUP BY CustNo, CustName;

#4. Insert yourself as a new row in the Customer table.
Insert into intercollegiate.CUSTOMER (CUSTNO,CUSTNAME,ADDRESS,INTERNAL,CONTACT,PHONE,CITY,STATE,ZIP) 
values ('C107','Swimming','Box 352211','N','Sean Manager','9853100','New York','AR','90309');

SELECT * FROM intercollegiate.CUstomer;
#5. Increase the rate by 10 percent of nurse resource in the resource table.
# To disable safe update since you are trying to update without where cause and primary key
SET SQL_SAFE_UPDATES = 0;

UPDATE intercollegiate.ResourceTbl
SET Rate = Rate * 1.1
WHERE Resname = "nurse";

SET SQL_SAFE_UPDATES = 1;

SELECT * FROM intercollegiate.resourcetbl;

UPDATE intercollegiate.ResourceTbl
SET Rate = Rate * 1.1
WHERE Resname = "police";
# Error code 1175: You are using safe update mode and you tried to uodate a table without a WHERE that uses a KEY column.

#6. Delete the new row added to the Customer table.

DELETE from  intercollegiate.Customer
WHERE CustNo = "C107";

SELECT * FROM intercollegiate.Customer;

######################################
#																		  #
#    						Extra Practice						  #
#																		  #
######################################


#The extra problems use the Order Entry Database as described in the Order Entry
#Database Background document. The course website also contains Oracle and MySQL CREATE
#TABLE statements as well as INSERT statements.

#1. List the order number, order date, customer number, customer name (first and last), employee number, and employee name (first and last) 
#of January 2013 orders placed by Colorado customers.

SELECT OrdNo, OrdDate, Customer.CustNo, CustFirstName, CustLastName, Employee.EmpNo, Employee.EmpFirstName, Employee.EmpLastName
FROM module4.Customer, module4.Employee, module4.OrderTbl
WHERE OrdDate BETWEEN '2013-1-1' AND '2013-1-31' AND CustState = "CO" 
AND Customer.CustNo = OrderTbl.CustNo AND Employee.EmpNo = OrderTbl.EmpNo;

SELECT OrdNo, OrdDate, Customer.CustNo, CustFirstName, CustLastName, Employee.EmpNo, Employee.EmpFirstName, Employee.EmpLastName
FROM module4.Customer INNER JOIN module4.OrderTbl ON Customer.CustNo = OrderTbl.CustNo
INNER JOIN module4.Employee ON Employee.EmpNo = OrderTbl.EmpNo
WHERE OrdDate BETWEEN '2013-1-1' AND '2013-1-31' AND CustState = "CO";

#2. List the customer number, name (first and last), order number, order date, employee number, employee name (first and last), product number, 
#product name, and order cost (OrdLine.Qty * ProdPrice) for products ordered on January 23, 2013, in which the order cost exceeds $150.
SELECT Customer.CustNo, CustFirstName, CustLastName, OrderTbl.OrdNo, OrdDate, Employee.EmpNo, EmpFirstName, EmpLastName, Product.ProdNo, ProdName, 
(Qty*ProdPrice) AS OrdCost
FROM module4.Customer, module4.Employee, module4.OrderTbl, module4.OrdLine, module4.Product
WHERE (Qty*ProdPrice) > 150 AND OrdDate = '2013-1-23' 
AND Customer.CustNo = OrderTbl.CustNo 
AND Employee.EmpNo = OrderTbl.EmpNo
AND OrderTbl.OrdNo = OrdLine.OrdNo
AND Product.ProdNo = OrdLine.ProdNo;

#3. List the order number and total amount for orders placed on January 23, 2013. The total amount of an order is the sum of the quantity 
#times the product price of each product on the order.
SELECT OrderTbl.OrdNo, SUM(Qty*ProdPrice) AS TotAmt
FROM module4.OrdLine, module4. Product, module4.OrderTbl
WHERE OrdDate = '2013-1-23'
AND OrdLine. ProdNo = Product.ProdNo 
AND OrdLine.OrdNo = OrderTbl.OrdNo
GROUP BY OrderTbl.OrdNo;

#4. List the order number, order date, customer name (first and last), and total amount for orders placed on January 23, 2013. 
#The total amount of an order is the sum of the quantity times the product price of each product on the order.
SELECT OrderTbl.OrdNo, OrdDate, CustFirstName, CustLastName, SUM(Qty*ProdPrice) AS TotAmt
FROM module4.OrdLine, module4. Product, module4.OrderTbl, module4.Customer
WHERE OrdDate = '2013-1-23'
AND OrdLine. ProdNo = Product.ProdNo 
AND OrdLine.OrdNo = OrderTbl.OrdNo
AND Customer.CustNo = OrderTbl.CustNo
GROUP BY OrderTbl.OrdNo, OrdDate, CustFirstName, CustLastName;

#5. Insert yourself as a new row in the Customer table.
INSERT Into module4.Customer
(CustNo, CustFirstName, CustLastName, CustStreet, CustCity, CustState, CustZip, CustBal)
VALUES ('C9999999','Michael','Mannino','123 Street','MyTown','CO','80217-0211','500');

SELECT * FROM module4.Customer;

#6. Insert an imaginary friend as a new row in the Employee table.
INSERT INTO module4.Employee
(EmpNo, EmpFirstName, EmpLastName, EmpPhone, EmpCommRate, EmpEmail)
VALUES ('E9999999','Mary','Mannino', '(720)543-1234', 0.04,'Mary.Mannino@abc.com');

SELECT * FROM module4.Employee

#7. Increase the price by 10 percent of products containing the words Ink Jet.
SET SQL_SAFE_UPDATES = 0;

UPDATE module4.product
SET ProdPrice = ProdPrice * 1.1
WHERE ProdName LIKE "%Ink Jet%";

SET SQL_SAFE_UPDATES = 1;

SELECT * FROM module4.Product;

#8. Delete the new row added to the Customer table.

DELETE FROM module4.Customer
WHERE CustNo = "C9999999";
	
