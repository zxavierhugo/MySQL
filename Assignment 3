Overview
You will write basic CREATE TABLE statements, modify them with constraints, and execute the statements to create all of the tables. You will use provided INSERT statements to populate all tables. This assignment uses intercollegiate athletic database and builds on what you have already created in the practice problems. To complete the assignment, you will produce a total of 5 CREATE TABLE statements and a screen snapshot as an evidence of execution of each of these statements.

Submission and Peer Review Steps
1. Read the assignment requirements. Below, you will find the assignment requirements in the Assignment Details section. Read these instructions carefully. Please provide a full and concise answer to each problem.

2. Submit your own assignment. You should click on My submission tab and upload one document for each question that contains the CREATE TABLE statement and the screen snapshot for the respective table.

3. Review the submission of your peers. A minimum of 2 peer reviews is required for this assignment. You should click on Review classmates tab and follow the prompts for each question. You will be able to perform this task after your own submission. You are welcome to provide more peer reviews beyond the minimum requirement.

4. Read feedback from your peers. When a review from your peer is submitted, you will get notified by an email. Please read it carefully as it may provide some helpful notes. Please feel welcome to appreciate your peer’s feedback by clicking on This review is helpful button.

5. Browse other assignment submissions. If you want to learn more, you may browse other submitted assignments. You don’t have to review them. You may click on Like button if you think your peer performed well in that assignment.

Assignment Details
The graded problems in Module 3 provide experience with the CREATE TABLE statement.  You should execute the statements using either Oracle or MySQL.

To facilitate grading, please number the SQL statements and format them neatly. You need to show the result tables. Indicate in the beginning of your document if you used Oracle or MySQL.

If you use Oracle, you will need to use the Oracle SQL Developer to connect to an Oracle server. If you use MySQL, you will need to use the MySQL Workbench to connect to a MySQL server.

1. Basic CREATE TABLE Statement Requirements
You should use the table descriptions in the Intercollegiate Database background document. You must use the same table and column names as specified in the background document. Here is some advice about data type selections.

You should use standard SQL data types specified in the notes except for using VARCHAR2 (an Oracle data type) instead of VARCHAR for columns containing varying length character strings. For MySQL, you should use VARCHAR for variable length strings.
For primary key fields (CustNo, LocNo, EventNo, PlanNo, EmpNo, ResNo, and FacNo), use the VARCHAR (or VARCHAR2 in Oracle) data type with length 8.  For consistency, corresponding foreign keys (such as EventRequest.CustNo) should also be the same data type and length.
For Oracle, you should use the DATE data type for the columns involving dates or times. The EventPlanLine.TimeStart and EventPlanLine.TimeEnd columns will store both date and time data so you should use the DATE data type. In MySQL use the DATE data type for columns with just date details (date columns in the EventRequest and EventPlan tables) and DATETIME for columns with date and time details (time columns in the EventPlanLine table).
Use CHAR(1) for the Customer.Internal column as Oracle does not provide a BOOLEAN data type.  MySQL has the Boolean data type, but I suggest that you use CHAR(1) instead.
2. Constraints
After writing the basic CREATE TABLE statements, you should modify the statements with constraints. The CONSTRAINT clauses can be either inline in a column definition or separate after column definitions except where noted. You should specify a meaningful name for each CONSTRAINT clause.

For each primary key, you should specify a PRIMARY KEY constraint clause. For single column primary keys (CustNo, LocNo, EventNo, PlanNo, EmpNo, ResNo, and FacNo), the constraint clause can be inline or external. For multiple column primary keys (combination of PlanNo and LineNo), the CONSTRAINT clause must be external.
For each foreign key, you should specify a FOREIGN KEY constraint clause. The constraint clauses can be inline or separate.
Define NOT NULL constraints for all columns except eventplan.empno, EventRequest.DateAuth, EventRequest.BudNo, and EventPlan.Notes.  Make sure that you define NOT NULL constraints for the PK of each table. Because of MySQL syntax limitations for NOT NULL constraints (inline with no constraint name and no CONSTRAINT keyword), you should define inline NOT NULL constraints.
Define a named CHECK constraint to restrict the eventrequest.status column to have a value of “Pending”, “Denied”, or “Approved”. You can use the IN operator in this constraint. In MySQL, the syntax does not allow the CONSTRAINT keyword and a constraint name for CHECK constraints. You should use the CHECK keyword followed the condition enclosed in parentheses.
Define named CHECK constraints to ensure that the resource.rate and eventrequest.estaudience are greater than 0. In MySQL, you cannot use a constraint name and the CONSTRAINT keyword for CHECK constraints. In MySQL, the syntax does not allow the CONSTRAINT keyword and a constraint name for CHECK constraints. You should use the CHECK keyword followed the condition enclosed in parentheses.
Define a named CHECK constraint involving EventPlanLine.TimeStart and EventPlanLineTimeEnd. The start time should be smaller (chronologically before) than the end time. This CHECK constraint must be external because it involves two columns. In MySQL, the syntax does not allow the CONSTRAINT keyword and a constraint name for CHECK constraints. You should use the CHECK keyword followed the condition enclosed in parentheses.
3. Populating Tables
The course website contains a text file containing SQL INSERT statements to populate the tables. You need to create the tables before inserting rows in each table. You need to insert rows in parent tables before child tables that reference parent tables. The INSERT statements in the file are in a proper order for populating the tables.

4. Initial CREATE TABLE Statements
To facilitate your work, you can use the CREATE TABLE statements you created in the practice assignment in module 03 for the Customer, Facility, and Location tables. Thus, you only need to write CREATE TABLE statements for the remaining five tables (ResourceTbl, Employee, EventRequest, EventPlan, and EventPlanLine). You still need to execute the CREATE TABLE statements to create all of the tables and the INSERT statements to populate all tables.

5. Submission
The submission requirements involve CREATE TABLE statements and evidence that you executed the statements and created the tables in Oracle or MySQL. You will submit 5 documents with each document containing a CREATE TABLE statement and screen snapshot to indicate that you created the table in Oracle or MySQL. In each document, you should neatly format your CREATE TABLE statement so that it can be easily graded. You should use the same table and column names as specified in the ICA database background document. You should not put any identifying details about yourself in your submitted document. For the screen snapshot, you need to capture a screen showing most columns and rows of the populated table. You can use a feature of the Oracle or MySQL client to show the rows in a table. Alternatively, you can execute an SQL statement (for example, SELECT * FROM ResourceTbl) to show the columns and rows.

You should submit the documents in this order.

Employee
ResourceTbl
EventRequest
EventPlan
EventPlanLine
Rubric
In the peer review section, you will be able to provide both quantitative and qualitative assessments for each problem in specific and in general.

Use the followings as guidelines for the quantitative assessment:

Excellent: All the requirements are met. (10 points)
Good: No syntax errors and only 1 or 2 missed requirements (9 points)
Average:  No syntax errors and 3 to 5 missing requirements. (7.5 points)
Below average: No syntax errors but more than 5 errors (5 points)
Poor: Syntax errors so statement does not execute. (0 point)
Reminders
You may discuss the requirements of this assignment in the forum section. Students are encouraged to help their peers in understanding the requirements and provide hints on how to solve the problems. However, complete and explicit answers to the requirements are not allowed.
Under the Honor code, you agreed that the submission of every assignment is your own complete work. Please reference your sources if you used quotations. Plagiarism is always not allowed in any of the assignments or practice problems. Plagiarism is defined as passing off someone else’s work as your own work.
Review Criterialess 
Use your best judgments in order to evaluate the submissions of each student. You don’t have to execute the statements. Instead, use the questions in the submission section as guidance.

======ANSWERS==============

# 1. Create the new scheme database first

CREATE SCHEMA `intercollegiate` ;

# 2. Create new tables based on the requirements explained in the assignments. 
# Take note of the constraints
# Create new tables: Customer, Facility and Location. 

CREATE TABLE `intercollegiate`.`Customer` (
`CustNo` VARCHAR(8) NOT NULL,
`CustName` VARCHAR(30) NOT NULL,
`Address` VARCHAR(50) NOT NULL,
`Internal` CHAR(1) NOT NULL,
`Contact` VARCHAR(35) NOT NULL,
`Phone` VARCHAR(11) NOT NULL,
`City` VARCHAR(30) NOT NULL,
`State` VARCHAR(2) NOT NULL,
`Zip` VARCHAR(10) NOT NULL,
CONSTRAINT PK_CUSTOMER PRIMARY KEY (`CustNo`) ) ;

CREATE TABLE `intercollegiate`.`Facility`(
`FacNo` VARCHAR(8) NOT NULL,
`FacName` VARCHAR(30) NOT NULL,
CONSTRAINT PK_FACILITY PRIMARY KEY (`FacNo`) );

DROP TABLE `intercollegiate`.`Facility`;

CREATE TABLE `intercollegiate`.`Facility`(
`FacNo` VARCHAR(8) NOT NULL,
`FacName` VARCHAR(30) NOT NULL,
CONSTRAINT PK_FACILITY PRIMARY KEY (`FacNo`) ,
CONSTRAINT Unique_FacName UNIQUE(`FacName`));

CREATE TABLE `intercollegiate`.`Location`(
`LocNo` VARCHAR(8) NOT NULL,
`FacNo` VARCHAR(8) NOT NULL,
`LocName` VARCHAR(30) NOT NULL,
CONSTRAINT PK_LOCATION PRIMARY KEY (`LocNo`),
CONSTRAINT FK_FACNO FOREIGN KEY (`FacNo`)
REFERENCES FACILITY (`FacNo`) );

# 3. Insert the new values in these created tables: Customer, Facility and Location

Insert into `intercollegiate`.`CUSTOMER` (CUSTNO,CUSTNAME,ADDRESS,INTERNAL,CONTACT,PHONE,CITY,STATE,ZIP) values ('C100','Football','Box 352200','Y','Mary Manager','6857100','Boulder','CO','80309');
Insert into `intercollegiate`.`Customer` (CUSTNO,CUSTNAME,ADDRESS,INTERNAL,CONTACT,PHONE,CITY,STATE,ZIP) values ('C101','Men''s Basketball','Box 352400','Y','Sally Supervisor','5431700','Boulder','CO','80309');
Insert into `intercollegiate`.`CUSTOMER` (CUSTNO,CUSTNAME,ADDRESS,INTERNAL,CONTACT,PHONE,CITY,STATE,ZIP) values ('C103','Baseball','Box 352020','Y','Bill Baseball','5431234','Boulder','CO','80309');
Insert into `intercollegiate`.`CUSTOMER` (CUSTNO,CUSTNAME,ADDRESS,INTERNAL,CONTACT,PHONE,CITY,STATE,ZIP) values ('C104','Women''s Softball','Box 351200','Y','Sue Softball','5434321','Boulder','CO','80309');
Insert into `intercollegiate`.`CUSTOMER` (CUSTNO,CUSTNAME,ADDRESS,INTERNAL,CONTACT,PHONE,CITY,STATE,ZIP) values ('C105','High School Football','123 AnyStreet','N','Coach Bob','4441234','Louisville','CO','80027');

SELECT * FROM intercollegiate.Customer;

Insert into intercollegiate.FACILITY (FACNO,FACNAME) values ('F100','Football stadium');
Insert into intercollegiate.FACILITY (FACNO,FACNAME) values ('F101','Basketball arena');
Insert into intercollegiate.FACILITY (FACNO,FACNAME) values ('F102','Baseball field');
Insert into intercollegiate.FACILITY (FACNO,FACNAME) values ('F103','Recreation room');

SELECT * FROM intercollegiate.Facility;

Insert into intercollegiate.LOCATION (LOCNO,FACNO,LOCNAME)values ('L100','F100','Locker room');
Insert into intercollegiate.LOCATION (LOCNO,FACNO,LOCNAME) values ('L101','F100','Plaza');
Insert into intercollegiate.LOCATION (LOCNO,FACNO,LOCNAME) values ('L102','F100','Vehicle gate');
Insert into intercollegiate.LOCATION (LOCNO,FACNO,LOCNAME) values ('L103','F101','Locker room');
Insert into intercollegiate.LOCATION (LOCNO,FACNO,LOCNAME) values ('L104','F100','Ticket Booth');
Insert into intercollegiate.LOCATION (LOCNO,FACNO,LOCNAME) values ('L105','F101','Gate');
Insert into intercollegiate.LOCATION (LOCNO,FACNO,LOCNAME) values ('L106','F100','Pedestrian gate');

SELECT * FROM  intercollegiate.Location;
SELECT * FROM  intercollegiate.Customer;
SELECT * FROM  intercollegiate.Facility;

# Create additional tables for Employee, EventRequest, EventPlan, EventPlanLine, ResourceTBL

CREATE TABLE intercollegiate.Employee (
EmpNo VARCHAR(8) NOT NULL,
EmpName VARCHAR(30) NOT NULL,
Department VARCHAR(30) NOT NULL,
Email VARCHAR(30) NOT NULL,
Phone VARCHAR(11) NOT NULL,
CONSTRAINT PK_Employee PRIMARY KEY (EmpNo) ) ;

DROP TABLE intercollegiate.ResourceTbl;

CREATE TABLE intercollegiate.ResourceTbl (
ResNo VARCHAR(8) NOT NULL,
ResName VARCHAR(30) NOT NULL,
Rate INTEGER NOT NULL,
CONSTRAINT Check_Positive CHECK (Rate > 0),
CONSTRAINT PK_ResourceTbl PRIMARY KEY (ResNo) ) ;

SELECT * from Intercollegiate.ResourceTbl;

DROP TABLE intercollegiate.EventRequest;

CREATE TABLE intercollegiate.EventRequest(
EventNo VARCHAR(8) NOT NULL,
DateHeld DATE NOT NULL,
DateReq DATE NOT NULL,
CustNo VARCHAR(8) NOT NULL,
FacNo VARCHAR(8) NOT NULL,
DateAuth DATE,
`Status` VARCHAR(8) NOT NULL,
EstCost DECIMAL(13,2) NOT NULL,
EstAudience INTEGER NOT NULL,
BudNo VARCHAR(5),
CONSTRAINT EstAudience CHECK (EstAudience > 0),
CONSTRAINT PK_EventRequest PRIMARY KEY (EventNo),
CONSTRAINT Check_Status CHECK (`Status` in ('Pending',  'Denied' , 'Approved')),
CONSTRAINT FK_CustNo_EventRequest FOREIGN KEY (CustNo) REFERENCES CUSTOMER (CustNo), 
CONSTRAINT FK_FacNo_EventRequest FOREIGN KEY (FacNo) REFERENCES FACILITY (FacNo)
);

SELECT * from intercollegiate.EventRequest;

DROP TABLE intercollegiate.EventPlan;

CREATE TABLE intercollegiate.EventPlan (
PlanNo VARCHAR(8) NOT NULL,
EventNo VARCHAR(8) NOT NULL,
WorkDate DATE NOT NULL,
Notes VARCHAR(50),
Activity VARCHAR(10) NOT NULL,
EmpNo VARCHAR(8),
CONSTRAINT PK_EventPlan PRIMARY KEY (PlanNo),
CONSTRAINT FK_EventNo_EventPlan FOREIGN KEY (EventNo) REFERENCES EventRequest (EventNo), 
CONSTRAINT FK_EmpNo_EventPlan FOREIGN KEY (EmpNo) REFERENCES Employee (EmpNo)
);

SELECT * from intercollegiate.EventPlan;

CREATE TABLE intercollegiate.EventPlanLine (
PlanNo VARCHAR(8) NOT NULL,
LineNo VARCHAR(8) NOT NULL,
TimeStart DATETIME NOT NULL,
TimeEnd DATETIME NOT NULL,
NumberFld VARCHAR(8) NOT NULL,
LocNo VARCHAR(8) NOT NULL,
ResNo VARCHAR(8) NOT NULL,
CONSTRAINT PK_EventPlanLine  PRIMARY KEY (PlanNo, LineNo),
CONSTRAINT CHECKTIME CHECK (TimeStart < TimeEnd),
CONSTRAINT FK_LocNo_EventPlanLine FOREIGN KEY (LocNo) REFERENCES Location (LocNo),
CONSTRAINT FK_ResNo_EventPlanLine FOREIGN KEY (ResNo) REFERENCES ResourceTbl (ResNo),
CONSTRAINT FK_PlanNo_EventPlanLine FOREIGN KEY (PlanNo) REFERENCES EventPlan (PlanNo)
);

SELECT * FROM intercollegiate.EventPlanLine;

# INSERT VALUES FOR NEWLY CREATED TABLES:  Employee, ResourceTbl, EventRequest, EventPlan, EventPlanLine

Insert into Intercollegiate.EMPLOYEE (EMPNO,EMPNAME,DEPARTMENT,EMAIL,PHONE) values ('E100','Chuck Coordinator','Administration','chuck@colorado.edu','3-1111');
Insert into Intercollegiate.EMPLOYEE (EMPNO,EMPNAME,DEPARTMENT,EMAIL,PHONE) values ('E101','Mary Manager','Football','mary@colorado.edu','5-1111');
Insert into Intercollegiate.EMPLOYEE (EMPNO,EMPNAME,DEPARTMENT,EMAIL,PHONE) values ('E102','Sally Supervisor','Planning','sally@colorado.edu','3-2222');
Insert into Intercollegiate.EMPLOYEE (EMPNO,EMPNAME,DEPARTMENT,EMAIL,PHONE) values ('E103','Alan Administrator','Administration','alan@colorado.edu','3-3333');

SELECT * FROM intercollegiate.employee;

Insert into intercollegiate.RESOURCETBL (RESNO,RESNAME,RATE) values ('R100','attendant',10);
Insert into intercollegiate.RESOURCETBL (RESNO,RESNAME,RATE) values ('R101','police',15);
Insert into intercollegiate.RESOURCETBL (RESNO,RESNAME,RATE) values ('R102','usher',10);
Insert into intercollegiate.RESOURCETBL (RESNO,RESNAME,RATE) values ('R103','nurse',20);
Insert into intercollegiate.RESOURCETBL (RESNO,RESNAME,RATE) values ('R104','janitor',15);
Insert into intercollegiate.RESOURCETBL (RESNO,RESNAME,RATE) values ('R105','food service',10);

SELECT * FROM intercollegiate.resourcetbl;

Insert into intercollegiate.EVENTREQUEST (EVENTNO,DATEHELD,DATEREQ,CUSTNO,FACNO,DATEAUTH,`STATUS`,ESTCOST,ESTAUDIENCE,BUDNO) values ('E100',str_to_date('25,OCT,13','%d,%b,%y'),str_to_date('06,JUN,13','%d,%b,%y'),'C100','F100',str_to_date('08,JUN,13','%d,%b,%y'),'Approved',5000,80000,'B1000');
Insert into intercollegiate.EVENTREQUEST (EVENTNO,DATEHELD,DATEREQ,CUSTNO,FACNO,DATEAUTH,`STATUS`,ESTCOST,ESTAUDIENCE,BUDNO) values ('E101',str_to_date('26,OCT,13','%d,%b,%y'),str_to_date('28,JUL,13','%d,%b,%y'),'C100','F100',null,'Pending',5000,80000,'B1000');
Insert into intercollegiate.EVENTREQUEST (EVENTNO,DATEHELD,DATEREQ,CUSTNO,FACNO,DATEAUTH,`STATUS`,ESTCOST,ESTAUDIENCE,BUDNO) values ('E103',str_to_date('21,SEP,13','%d,%b,%y'),str_to_date('28,JUL,13','%d,%b,%y'),'C100','F100',str_to_date('01,AUG,13','%d,%b,%y'),'Approved',5000,80000,'B1000');
Insert into intercollegiate.EVENTREQUEST (EVENTNO,DATEHELD,DATEREQ,CUSTNO,FACNO,DATEAUTH,`STATUS`,ESTCOST,ESTAUDIENCE,BUDNO) values ('E102',str_to_date('14,SEP,13','%d,%b,%y'),str_to_date('28,JUL,13','%d,%b,%y'),'C100','F100',str_to_date('31,JUL,13','%d,%b,%y'),'Approved',5000,80000,'B1000');
Insert into intercollegiate.EVENTREQUEST (EVENTNO,DATEHELD,DATEREQ,CUSTNO,FACNO,DATEAUTH,`STATUS`,ESTCOST,ESTAUDIENCE,BUDNO) values ('E104',str_to_date('03,DEC,13','%d,%b,%y'),str_to_date('28,JUL,13','%d,%b,%y'),'C101','F101',str_to_date('31,JUL,13','%d,%b,%y'),'Approved',2000,12000,'B1000');
Insert into intercollegiate.EVENTREQUEST (EVENTNO,DATEHELD,DATEREQ,CUSTNO,FACNO,DATEAUTH,`STATUS`,ESTCOST,ESTAUDIENCE,BUDNO) values ('E105',str_to_date('05,DEC,13','%d,%b,%y'),str_to_date('28,JUL,13','%d,%b,%y'),'C101','F101',str_to_date('01,AUG,13','%d,%b,%y'),'Approved',2000,10000,'B1000');
Insert into intercollegiate.EVENTREQUEST (EVENTNO,DATEHELD,DATEREQ,CUSTNO,FACNO,DATEAUTH,`STATUS`,ESTCOST,ESTAUDIENCE,BUDNO) values ('E106',str_to_date('12,DEC,13','%d,%b,%y'),str_to_date('28,JUL,13','%d,%b,%y'),'C101','F101',str_to_date('31,JUL,13','%d,%b,%y'),'Approved',2000,10000,'B1000');
Insert into intercollegiate.EVENTREQUEST (EVENTNO,DATEHELD,DATEREQ,CUSTNO,FACNO,DATEAUTH,`STATUS`,ESTCOST,ESTAUDIENCE,BUDNO) values ('E107',str_to_date('23,NOV,13','%d,%b,%y'),str_to_date('28,JUL,13','%d,%b,%y'),'C105','F100',str_to_date('31,JUL,13','%d,%b,%y'),'Denied',10000,5000,null);

SELECT * FROM intercollegiate.eventrequest;

Insert into intercollegiate.EVENTPLAN (PLANNO,EVENTNO,WORKDATE,NOTES,ACTIVITY,EMPNO) values ('P100','E100',str_to_date('25,OCT,13','%d,%b,%y'),'Standard operation','Operation','E102');
Insert into intercollegiate.EVENTPLAN (PLANNO,EVENTNO,WORKDATE,NOTES,ACTIVITY,EMPNO) values ('P101','E104',str_to_date('03,DEC,13','%d,%b,%y'),'Watch for gate crashers','Operation','E100');
Insert into intercollegiate.EVENTPLAN (PLANNO,EVENTNO,WORKDATE,NOTES,ACTIVITY,EMPNO) values ('P102','E105',str_to_date('05,DEC,13','%d,%b,%y'),'Standard operation','Operation','E102');
Insert into intercollegiate.EVENTPLAN (PLANNO,EVENTNO,WORKDATE,NOTES,ACTIVITY,EMPNO) values ('P103','E106',str_to_date('12,DEC,13','%d,%b,%y'),'Watch for seat switching','Operation',null);
Insert into intercollegiate.EVENTPLAN (PLANNO,EVENTNO,WORKDATE,NOTES,ACTIVITY,EMPNO) values ('P104','E101',str_to_date('26,OCT,13','%d,%b,%y'),'Standard cleanup','Cleanup','E101');
Insert into intercollegiate.EVENTPLAN (PLANNO,EVENTNO,WORKDATE,NOTES,ACTIVITY,EMPNO) values ('P105','E100',str_to_date('25,OCT,13','%d,%b,%y'),'Light cleanup','Cleanup','E101');
Insert into intercollegiate.EVENTPLAN (PLANNO,EVENTNO,WORKDATE,NOTES,ACTIVITY,EMPNO) values ('P199','E102',str_to_date('10,DEC,13','%d,%b,%y'),'ABC','Operation','E101');
Insert into intercollegiate.EVENTPLAN (PLANNO,EVENTNO,WORKDATE,NOTES,ACTIVITY,EMPNO) values ('P299','E101',str_to_date('26,OCT,13','%d,%b,%y'),null,'Operation','E101');
Insert into intercollegiate.EVENTPLAN (PLANNO,EVENTNO,WORKDATE,NOTES,ACTIVITY,EMPNO) values ('P349','E106',str_to_date('12,DEC,13','%d,%b,%y'),null,'Setup','E101');
Insert into intercollegiate.EVENTPLAN (PLANNO,EVENTNO,WORKDATE,NOTES,ACTIVITY,EMPNO) values ('P85','E100',str_to_date('25,OCT,13','%d,%b,%y'),'Standard operation','Cleanup','E102');
Insert into intercollegiate.EVENTPLAN (PLANNO,EVENTNO,WORKDATE,NOTES,ACTIVITY,EMPNO) values ('P95','E101',str_to_date('26,OCT,13','%d,%b,%y'),'Extra security','Cleanup','E102');

SELECT * FROM intercollegiate.eventplan;

Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P100',1, str_to_date('25,OCT,13 8:00:00','%d,%b,%y %H:%i:%s'), str_to_date('25,OCT,13 17:00:00','%d,%b,%y %H:%i:%s'),2,'L100','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P100',2, str_to_date('25,OCT,13 12:00:00','%d,%b,%y %H:%i:%s'),str_to_date('25,OCT,13 17:00:00','%d,%b,%y %H:%i:%s'), 2,'L101','R101');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P100',3, str_to_date('25,OCT,13 7:00:00','%d,%b,%y %H:%i:%s'), str_to_date('25,OCT,13 16:30:00','%d,%b,%y %H:%i:%s'), 1,'L102','R102');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P100',4, str_to_date('25,OCT,13 18:00:00','%d,%b,%y %H:%i:%s'),str_to_date('25,OCT,13 22:00:00','%d,%b,%y %H:%i:%s'),2,'L100','R102');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P101',1, str_to_date('3,DEC,13 18:00:00','%d,%b,%y %H:%i:%s'),str_to_date('3,DEC,13 20:00:00','%d,%b,%y %H:%i:%s'),2,'L103','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P101',2, str_to_date('3,DEC,13 18:30:00','%d,%b,%y %H:%i:%s'),str_to_date('3,DEC,13 19:00:00','%d,%b,%y %H:%i:%s'),4,'L105','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P101',3, str_to_date('3,DEC,13 19:00:00','%d,%b,%y %H:%i:%s'),str_to_date('3,DEC,13 20:00:00','%d,%b,%y %H:%i:%s'),2,'L103','R103');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P102',1, str_to_date('5,DEC,13 18:00:00','%d,%b,%y %H:%i:%s'),str_to_date('5,DEC,13 19:00:00','%d,%b,%y %H:%i:%s'),2,'L103','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P102',2, str_to_date('5,DEC,13 18:00:00','%d,%b,%y %H:%i:%s'),str_to_date('5,DEC,13 21:00:00','%d,%b,%y %H:%i:%s'),4,'L105','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P102',3, str_to_date('5,DEC,13 19:00:00','%d,%b,%y %H:%i:%s'),str_to_date('5,DEC,13 22:00:00','%d,%b,%y %H:%i:%s'),2,'L103','R103');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P103',1, str_to_date('12,DEC,13 18:00:00','%d,%b,%y %H:%i:%s'),str_to_date('12,DEC,13 21:00:00','%d,%b,%y %H:%i:%s'),2,'L103','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P103',2, str_to_date('12,DEC,13 18:00:00','%d,%b,%y %H:%i:%s'),str_to_date('12,DEC,13 21:00:00','%d,%b,%y %H:%i:%s'),4,'L105','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P103',3, str_to_date('12,DEC,13 19:00:00','%d,%b,%y %H:%i:%s'),str_to_date('12,DEC,13 22:00:00','%d,%b,%y %H:%i:%s'),2,'L103','R103');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P104',1, str_to_date('26,OCT,13 18:00:00','%d,%b,%y %H:%i:%s'),str_to_date('26,OCT,13 22:00:00','%d,%b,%y %H:%i:%s'),4,'L101','R104');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P104',2, str_to_date('26,OCT,13 18:00:00','%d,%b,%y %H:%i:%s'),str_to_date('26,OCT,13 22:00:00','%d,%b,%y %H:%i:%s'),4,'L100','R104');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P105',1, str_to_date('25,OCT,13 18:00:00','%d,%b,%y %H:%i:%s'),str_to_date('25,OCT,13 22:00:00','%d,%b,%y %H:%i:%s'),4,'L101','R104');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P105',2, str_to_date('25,OCT,13 18:00:00','%d,%b,%y %H:%i:%s'),str_to_date('25,OCT,13 22:00:00','%d,%b,%y %H:%i:%s'),4,'L100','R104');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P199',1, str_to_date('10,DEC,13 8:00:00','%d,%b,%y %H:%i:%s'), str_to_date('10,DEC,13 12:00:00','%d,%b,%y %H:%i:%s'),1,'L100','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P349',1, str_to_date('12,DEC,13 12:00:00','%d,%b,%y %H:%i:%s'),str_to_date('12,DEC,13 15:30:00','%d,%b,%y %H:%i:%s'),1,'L103','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P85',1,  str_to_date('25,OCT,13 9:00:00','%d,%b,%y %H:%i:%s'), str_to_date('25,OCT,13 17:00:00','%d,%b,%y %H:%i:%s'),5,'L100','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P85',2,  str_to_date('25,OCT,13 8:00:00','%d,%b,%y %H:%i:%s'), str_to_date('25,OCT,13 17:00:00','%d,%b,%y %H:%i:%s'),2,'L102','R101');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P85',3, str_to_date('25,OCT,13 10:00:00','%d,%b,%y %H:%i:%s'), str_to_date('25,OCT,13 15:00:00','%d,%b,%y %H:%i:%s'),3,'L104','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P95',1, str_to_date('26,OCT,13 8:00:00','%d,%b,%y %H:%i:%s'),  str_to_date('26,OCT,13 17:00:00','%d,%b,%y %H:%i:%s'),4,'L100','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P95',2, str_to_date('26,OCT,13 9:00:00','%d,%b,%y %H:%i:%s'),  str_to_date('26,OCT,13 17:00:00','%d,%b,%y %H:%i:%s'),4,'L102','R101');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P95',3, str_to_date('26,OCT,13 10:00:00','%d,%b,%y %H:%i:%s'), str_to_date('26,OCT,13 15:00:00','%d,%b,%y %H:%i:%s'),4,'L106','R100');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P95',4, str_to_date('26,OCT,13 13:00:00','%d,%b,%y %H:%i:%s'), str_to_date('26,OCT,13 17:00:00','%d,%b,%y %H:%i:%s'),2,'L100','R103');
Insert into intercollegiate.EVENTPLANLINE (PLANNO,LINENO,TIMESTART,TIMEEND,NUMBERFLD,LOCNO,RESNO) values ('P95',5, str_to_date('26,OCT,13 13:00:00','%d,%b,%y %H:%i:%s'), str_to_date('26,OCT,13 17:00:00','%d,%b,%y %H:%i:%s'),2,'L101','R104');

SELECT * FROM intercollegiate.eventplanline;

# Summary of all created tables

SELECT * FROM intercollegiate.customer;
SELECT * FROM intercollegiate.employee;
SELECT * FROM intercollegiate.facility;
SELECT * FROM intercollegiate.location;
SELECT * FROM intercollegiate.resourcetbl;
SELECT * FROM intercollegiate.eventrequest;
SELECT * FROM intercollegiate.eventplan;
SELECT * FROM intercollegiate.eventplanline;

